{"version":3,"sources":["main.js"],"names":["Point","x","y","Polygon","points","Circle","radius","center","hexToRGB","hex","alpha","r","parseInt","slice","g","b","App","colors","lastMousePos","mouseIsDown","canvas","document","getElementById","ctx","getContext","origin","addMouseListeners","stepSize","stepRange","resize","drawBasis","addEventListener","event","undefined","mDx","mDy","shiftOrigin","updateAll","setAttribute","window","getComputedStyle","getPropertyValue","width","height","lineCap","lineJoin","clearRect","deltaX","deltaY","position","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","fillStyle","arc","Math","PI","fill","point","color","length","pt","canvLocate","section_id","left","right","top","bottom","push","gridPoly","pts","i","arr","Number","isNaN","isValid","clearGrid","childNodes","forEach","value","shapeType","getElementsByTagName","numbers","trim","split","map","isValidRect","addRect","isValidCirc","addCirc","isValidPoly","addPoly","app","addShapeButton","shapeList","shapes","target","tagName","li","createElement","tx","se","append","shape","option","createTextNode"],"mappings":";AAgRA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAhRMA,IAAAA,EACF,SAAYC,EAAAA,EAAGC,GAAG,EAAA,KAAA,GACTD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,GAGXC,EACF,SAAYC,EAAAA,GAAQ,EAAA,KAAA,GACXA,KAAAA,OAASA,GAGhBC,EACF,SAAYC,EAAAA,EAAQC,GAAQ,EAAA,KAAA,GACnBD,KAAAA,OAASA,EACTC,KAAAA,OAASA,GAGtB,SAASC,EAASC,EAAKC,GACbC,IAAAA,EAAIC,SAASH,EAAII,MAAM,EAAG,GAAI,IAC9BC,EAAIF,SAASH,EAAII,MAAM,EAAG,GAAI,IAC9BE,EAAIH,SAASH,EAAII,MAAM,EAAG,GAAI,IAChCH,OAAAA,EACeC,QAAAA,OAAAA,EAAMG,MAAAA,OAAAA,EAAMC,MAAAA,OAAAA,EAAML,MAAAA,OAAAA,EAAjC,KAGeC,QAAAA,OAAAA,EAAMG,MAAAA,OAAAA,EAAMC,MAAAA,OAAAA,EAA3B,KAGFC,IAAAA,EAAAA,WACY,SAAA,IAAA,EAAA,KAAA,GACLC,KAAAA,OAAS,CAAC,UAAW,UAAW,UAAW,UAAW,WAEtDC,KAAAA,aAAe,CAAEjB,EAAG,EAAGC,EAAG,GAC1BiB,KAAAA,aAAc,EACfC,IAAAA,EAASC,SAASC,eAAe,QACjCC,EAAMH,EAAOI,WAAW,MACvBC,KAAAA,OAAS,IAAIzB,EAAM,EAAG,GACtBuB,KAAAA,IAAMA,EACNH,KAAAA,OAASA,EACTM,KAAAA,oBACAC,KAAAA,SAAW,GACXC,KAAAA,UAAY,EACZC,KAAAA,SACAC,KAAAA,YAqOb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBAnOwB,MAAA,WAAA,IAAA,EAAA,KACXV,KAAAA,OAAOW,iBAAiB,YAAa,SAACC,GACvC,EAAKb,aAAc,EACnB,EAAKD,aAAajB,EAAI+B,EAAM/B,EAC5B,EAAKiB,aAAahB,EAAI8B,EAAM9B,IAE3BkB,KAAAA,OAAOW,iBAAiB,UAAW,WACpC,EAAKZ,aAAc,IAElBC,KAAAA,OAAOW,iBAAiB,YAAa,SAACC,GACnC,GAAC,EAAKb,YAAN,CAEA,QAAwBc,IAAxB,EAAKf,aAAajB,QAA2CgC,IAAxB,EAAKf,aAAahB,EAAiB,CACpEgC,IAAAA,EAAMF,EAAM/B,EAAI,EAAKiB,aAAajB,EAClCkC,EAAMH,EAAM9B,EAAI,EAAKgB,aAAahB,EACtC,EAAKkC,YAAYF,EAAKC,GACtB,EAAKL,YACL,EAAKO,YAET,EAAKnB,aAAajB,EAAI+B,EAAM/B,EAC5B,EAAKiB,aAAahB,EAAI8B,EAAM9B,OA+MxC,CAAA,IAAA,SA5Ma,MAAA,WACAkB,KAAAA,OAAOkB,aAAa,QAASC,OAAOC,iBAAiB,KAAKpB,OAAQ,MAAMqB,iBAAiB,UACzFrB,KAAAA,OAAOkB,aAAa,SAAUC,OAAOC,iBAAiB,KAAKpB,OAAQ,MAAMqB,iBAAiB,WAC1FhB,KAAAA,OAAS,IAAIzB,EAAM,KAAKoB,OAAOsB,MAAQ,EAAG,KAAKtB,OAAOuB,OAAS,GAE/DpB,KAAAA,IAAIqB,QAAU,QACdrB,KAAAA,IAAIsB,SAAW,UAsM5B,CAAA,IAAA,YApMgB,MAAA,WACHtB,KAAAA,IAAIuB,UAAU,EAAG,EAAG,KAAK1B,OAAOsB,MAAO,KAAKtB,OAAOuB,UAmMhE,CAAA,IAAA,cAjMgBI,MAAAA,SAAAA,EAAQC,GACXvB,KAAAA,OAAOxB,GAAK8C,EACZtB,KAAAA,OAAOvB,GAAK8C,IA+LzB,CAAA,IAAA,YA7LgB,MAAA,WAEH,IAAA,IAAIC,EAAW,KAAKxB,OAAOxB,EAAI,KAAK0B,SAAUsB,EAAW,KAAK7B,OAAOsB,MAAOO,GAAY,KAAKtB,SACzFJ,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAOJ,EAAU,GACrB1B,KAAAA,IAAI+B,OAAOL,EAAU,KAAK7B,OAAOuB,QACjCpB,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,YAER,IAAA,IAAIP,EAAW,KAAKxB,OAAOxB,EAAI,KAAK0B,SAAUsB,EAAW,EAAGA,GAAY,KAAKtB,SACzEJ,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAOJ,EAAU,GACrB1B,KAAAA,IAAI+B,OAAOL,EAAU,KAAK7B,OAAOuB,QACjCpB,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,YAER,IAAA,IAAIP,EAAW,KAAKxB,OAAOvB,EAAI,KAAKyB,SAAUsB,EAAW,KAAK7B,OAAOuB,OAAQM,GAAY,KAAKtB,SAC1FJ,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAO,EAAGJ,GACd1B,KAAAA,IAAI+B,OAAO,KAAKlC,OAAOsB,MAAOO,GAC9B1B,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,YAER,IAAA,IAAIP,EAAW,KAAKxB,OAAOvB,EAAI,KAAKyB,SAAUsB,EAAW,EAAGA,GAAY,KAAKtB,SACzEJ,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAO,EAAGJ,GACd1B,KAAAA,IAAI+B,OAAO,KAAKlC,OAAOsB,MAAOO,GAC9B1B,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,YAERjC,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAIkC,UAAY,UAChBlC,KAAAA,IAAI4B,YAAc,UAElB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAImC,IAAI,KAAKjC,OAAOxB,EAAG,KAAKwB,OAAOvB,EAAG,EAAG,EAAa,EAAVyD,KAAKC,IACjDrC,KAAAA,IAAIsC,OACJtC,KAAAA,IAAIiC,YAEJjC,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAO,KAAK5B,OAAOxB,EAAG,GAC1BsB,KAAAA,IAAI+B,OAAO,KAAK7B,OAAOxB,EAAG,KAAKmB,OAAOuB,QACtCpB,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,YAEJjC,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI4B,YAAc,UAClB5B,KAAAA,IAAI6B,YACJ7B,KAAAA,IAAI8B,OAAO,EAAG,KAAK5B,OAAOvB,GAC1BqB,KAAAA,IAAI+B,OAAO,KAAKlC,OAAOsB,MAAO,KAAKjB,OAAOvB,GAC1CqB,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,cAgIjB,CAAA,IAAA,aA3HeM,MAAAA,SAAAA,GACA,OAAA,IAAI9D,EAAM,KAAKyB,OAAOxB,EAAK,KAAK0B,SAAWmC,EAAM7D,EAAK,KAAK2B,UAAW,KAAKH,OAAOvB,EAAK,KAAKyB,SAAWmC,EAAM5D,EAAK,KAAK0B,aA0HtI,CAAA,IAAA,WAxHaxB,MAAAA,SAAAA,EAAQ2D,GACT3D,GAAkB,IAAlBA,EAAO4D,OAAP5D,CAECmB,KAAAA,IAAIkC,UAAYjD,EAASuD,EAAO,OAChCxC,KAAAA,IAAI4B,YAAcY,EAClBxC,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI8B,OAAOjD,EAAO,GAAGH,EAAGG,EAAO,GAAGF,GAClCqB,KAAAA,IAAI6B,YACShD,IARE,EAQFA,EAAAA,EAAAA,GARE,IAQM,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjB0D,IAAAA,EAAiB,EAAA,MAClBG,EAAK,KAAKC,WAAWJ,GACpBvC,KAAAA,IAAI+B,OAAOW,EAAGhE,EAAGgE,EAAG/D,IAVT,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAYfqB,KAAAA,IAAIiC,YACJjC,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIsC,UA0GjB,CAAA,IAAA,UAxGYM,MAAAA,SAAAA,EAAYC,EAAMC,EAAOC,EAAKC,EAAQR,GACtC3D,IAAAA,EAAS,GACbA,EAAOoE,KAAK,IAAIxE,EAAMoE,EAAME,IAC5BlE,EAAOoE,KAAK,IAAIxE,EAAMoE,EAAMG,IAC5BnE,EAAOoE,KAAK,IAAIxE,EAAMqE,EAAOE,IAC7BnE,EAAOoE,KAAK,IAAIxE,EAAMqE,EAAOC,IACxBG,KAAAA,SAASrE,EAAQ2D,KAkG9B,CAAA,IAAA,UAhGYI,MAAAA,SAAAA,EAAY7D,EAAQC,EAAQwD,GAE3BxC,KAAAA,IAAI4B,YAAcY,EAClBxC,KAAAA,IAAIkC,UAAYjD,EAASuD,EAAO,OAChCxC,KAAAA,IAAI2B,UAAY,EAChB3B,KAAAA,IAAI6B,YACLa,IAAAA,EAAK,KAAKC,WAAW3D,GACpBgB,KAAAA,IAAImC,IAAIO,EAAGhE,EAAGgE,EAAG/D,EAAGI,EAAS,KAAKqB,SAAU,EAAa,EAAVgC,KAAKC,IACpDrC,KAAAA,IAAIsC,OACJtC,KAAAA,IAAIgC,SACJhC,KAAAA,IAAIiC,cAsFjB,CAAA,IAAA,UApFYW,MAAAA,SAAAA,EAAYO,EAAKX,GAEhB,IADD3D,IAAAA,EAAS,GACJuE,EAAI,EAAGA,EAAID,EAAIV,OAAQW,GAAK,EACjCvE,EAAOoE,KAAK,IAAIxE,EAAM0E,EAAIC,GAAID,EAAIC,EAAI,KAGrCF,KAAAA,SAASrE,EAAQ2D,KA8E9B,CAAA,IAAA,UA5EYa,MAAAA,SAAAA,GAEUA,IAFL,EAEKA,EAAAA,EAAAA,GAFL,IAET,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAS3E,IAAAA,EAAT,EAAA,MACQ4E,GAAAA,OAAOC,MAAM7E,GACb,OAAO,GAJN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAKF,OAAA,IAuEf,CAAA,IAAA,cArEgB2E,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,KAAwB,IAAfA,EAAIZ,QAA+B,IAAfY,EAAIZ,UAoE7D,CAAA,IAAA,cAlEgBY,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,IAAuB,IAAfA,EAAIZ,SAiExC,CAAA,IAAA,cA/DgBY,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,IAAQA,EAAIZ,OAAS,GAAM,IA8DvD,CAAA,IAAA,YA5DgB,MAAA,WAAA,IAAA,EAAA,KACHgB,KAAAA,YACAlD,KAAAA,YACaT,SAASC,eAAe,UAChC2D,WAAWC,QAAQ,SAACC,EAAOlC,GAC7BmC,IAAAA,EAAYD,EAAME,qBAAqB,UAAU,GAAGF,MACpDG,EAAUH,EAAME,qBAAqB,YAAY,GAAGF,MAAMI,OAAOC,MAAM,MAAMC,IAAI,SAAAxF,GAAK,OAACA,IAEvF8D,EAAQ,EAAK9C,OAAOgC,EAAW,EAAKhC,OAAO+C,QACvCoB,OAAAA,GACC,IAAA,YACG,EAAKM,YAAYJ,IACjB,EAAKK,QAAQ1C,EAAUqC,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIvB,GAE3E,MACC,IAAA,SACG,EAAK6B,YAAYN,IACjB,EAAKO,QAAQ5C,EAAUqC,EAAQ,GAAI,IAAItF,EAAMsF,EAAQ,GAAIA,EAAQ,IAAKvB,GAE1E,MACC,IAAA,UACG,EAAK+B,YAAYR,IACjB,EAAKS,QAAQ9C,EAAUqC,EAASvB,UAsCxD,EApPM/C,GAuNFgF,EAAM,IAAIhF,EACRiF,EAAiB5E,SAASC,eAAe,OACzC4E,EAAY7E,SAASC,eAAe,UACpC6E,EAAS,CAAC,YAAa,SAAU,SAAU,QAAS,WAC1DD,EAAUnE,iBAAiB,QAAS,SAACC,GAEV,aADVA,EAAMoE,OACRC,SACPL,EAAI3D,cAIZ4D,EAAelE,iBAAiB,QAAS,WACjCuE,IAAAA,EAAKjF,SAASkF,cAAc,MAC5BC,EAAKnF,SAASkF,cAAc,YAC5BE,EAAKpF,SAASkF,cAAc,UAChCD,EAAGI,OAAOD,GACVH,EAAGI,OAAOF,GACVN,EAAUQ,OAAOJ,GACCH,IAPyB,EAOzBA,EAAAA,EAAAA,GAPyB,IAOjB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBQ,IAAAA,EAAiB,EAAA,MAClBC,EAASvF,SAASkF,cAAc,UACpCK,EAAOF,OAAOrF,SAASwF,eAAeF,IACtCF,EAAGC,OAAOE,IAV6B,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OAa/CrE,OAAOR,iBAAiB,SAAU,WAC9BiE,EAAInE,SACJmE,EAAIlE,YACJkE,EAAI3D","file":"main.9a4a08f5.js","sourceRoot":"../src","sourcesContent":["class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nclass Polygon {\n    constructor(points) {\n        this.points = points;\n    }\n}\nclass Circle {\n    constructor(radius, center) {\n        this.radius = radius;\n        this.center = center;\n    }\n}\nfunction hexToRGB(hex, alpha) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    if (alpha) {\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    else {\n        return `rgba(${r}, ${g}, ${b})`;\n    }\n}\nclass App {\n    constructor() {\n        this.colors = ['#9c7979', '#9c9279', '#799c7d', '#798c9c', '#93799c'];\n        /* private allShapes: Map<number, Polygon|Circle>; */\n        this.lastMousePos = { x: 0, y: 0 };\n        this.mouseIsDown = false;\n        let canvas = document.getElementById('canv');\n        let ctx = canvas.getContext('2d');\n        this.origin = new Point(0, 0);\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.addMouseListeners();\n        this.stepSize = 50;\n        this.stepRange = 1;\n        this.resize();\n        this.drawBasis();\n    }\n    addMouseListeners() {\n        this.canvas.addEventListener('mousedown', (event) => {\n            this.mouseIsDown = true;\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n        this.canvas.addEventListener('mouseup', () => {\n            this.mouseIsDown = false;\n        });\n        this.canvas.addEventListener('mousemove', (event) => {\n            if (!this.mouseIsDown)\n                return;\n            if (this.lastMousePos.x !== undefined && this.lastMousePos.y !== undefined) {\n                let mDx = event.x - this.lastMousePos.x;\n                let mDy = event.y - this.lastMousePos.y;\n                this.shiftOrigin(mDx, mDy);\n                this.drawBasis();\n                this.updateAll();\n            }\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n    }\n    resize() {\n        this.canvas.setAttribute('width', window.getComputedStyle(this.canvas, null).getPropertyValue(\"width\"));\n        this.canvas.setAttribute('height', window.getComputedStyle(this.canvas, null).getPropertyValue(\"height\"));\n        this.origin = new Point(this.canvas.width / 2, this.canvas.height / 2);\n        // for some reason, these values are reset inside this function, so set them back\n        this.ctx.lineCap = 'round';\n        this.ctx.lineJoin = 'round';\n    }\n    clearGrid() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    shiftOrigin(deltaX, deltaY) {\n        this.origin.x += deltaX;\n        this.origin.y += deltaY;\n    }\n    drawBasis() {\n        // tick marks\n        for (let position = this.origin.x + this.stepSize; position < this.canvas.width; position += this.stepSize) {\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeStyle = '#eeeeee';\n            this.ctx.beginPath();\n            this.ctx.moveTo(position, 0);\n            this.ctx.lineTo(position, this.canvas.height);\n            this.ctx.stroke();\n            this.ctx.closePath();\n        }\n        for (let position = this.origin.x - this.stepSize; position > 0; position -= this.stepSize) {\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeStyle = '#eeeeee';\n            this.ctx.beginPath();\n            this.ctx.moveTo(position, 0);\n            this.ctx.lineTo(position, this.canvas.height);\n            this.ctx.stroke();\n            this.ctx.closePath();\n        }\n        for (let position = this.origin.y + this.stepSize; position < this.canvas.height; position += this.stepSize) {\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeStyle = '#eeeeee';\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, position);\n            this.ctx.lineTo(this.canvas.width, position);\n            this.ctx.stroke();\n            this.ctx.closePath();\n        }\n        for (let position = this.origin.y - this.stepSize; position > 0; position -= this.stepSize) {\n            this.ctx.lineWidth = 2;\n            this.ctx.strokeStyle = '#eeeeee';\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, position);\n            this.ctx.lineTo(this.canvas.width, position);\n            this.ctx.stroke();\n            this.ctx.closePath();\n        }\n        this.ctx.lineWidth = 2;\n        this.ctx.fillStyle = '#c9c9c9';\n        this.ctx.strokeStyle = '#c9c9c9';\n        // the origin\n        this.ctx.beginPath();\n        this.ctx.arc(this.origin.x, this.origin.y, 5, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n        // y axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.origin.x, 0);\n        this.ctx.lineTo(this.origin.x, this.canvas.height);\n        this.ctx.stroke();\n        this.ctx.closePath();\n        // x axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, this.origin.y);\n        this.ctx.lineTo(this.canvas.width, this.origin.y);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * locate the actual coordinates of a point on the canvas, given a grid point\n     **/\n    canvLocate(point) {\n        return new Point(this.origin.x + (this.stepSize * point.x) / this.stepRange, this.origin.y - (this.stepSize * point.y) / this.stepRange);\n    }\n    gridPoly(points, color) {\n        if (points.length === 0)\n            return;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 5;\n        this.ctx.moveTo(points[0].x, points[0].y);\n        this.ctx.beginPath();\n        for (let point of points) {\n            let pt = this.canvLocate(point);\n            this.ctx.lineTo(pt.x, pt.y);\n        }\n        this.ctx.closePath();\n        this.ctx.stroke();\n        this.ctx.fill();\n    }\n    addRect(section_id, left, right, top, bottom, color) {\n        let points = [];\n        points.push(new Point(left, top));\n        points.push(new Point(left, bottom));\n        points.push(new Point(right, bottom));\n        points.push(new Point(right, top));\n        this.gridPoly(points, color);\n    }\n    addCirc(section_id, radius, center, color) {\n        /* console.log('in here'); */\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.lineWidth = 5;\n        this.ctx.beginPath();\n        let pt = this.canvLocate(center);\n        this.ctx.arc(pt.x, pt.y, radius * this.stepSize, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    addPoly(section_id, pts, color) {\n        let points = [];\n        for (let i = 0; i < pts.length; i += 2) {\n            points.push(new Point(pts[i], pts[i + 1]));\n        }\n        ;\n        this.gridPoly(points, color);\n    }\n    isValid(arr) {\n        // check for NaN\n        for (let x of arr)\n            if (Number.isNaN(x))\n                return false;\n        return true;\n    }\n    isValidRect(arr) {\n        return this.isValid(arr) && (arr.length === 4 || arr.length === 8);\n    }\n    isValidCirc(arr) {\n        return this.isValid(arr) && arr.length === 3;\n    }\n    isValidPoly(arr) {\n        return this.isValid(arr) && arr.length % 2 === 0;\n    }\n    updateAll() {\n        this.clearGrid();\n        this.drawBasis();\n        const shapeList = document.getElementById('shapes');\n        shapeList.childNodes.forEach((value, position) => {\n            let shapeType = value.getElementsByTagName('select')[0].value;\n            let numbers = value.getElementsByTagName('textarea')[0].value.trim().split(/ +/).map(x => +x);\n            /* let color = hexToRGB(this.colors[position % this.colors.length], '0.5'); */\n            let color = this.colors[position % this.colors.length];\n            switch (shapeType) {\n                case 'rectangle':\n                    if (this.isValidRect(numbers)) {\n                        this.addRect(position, numbers[0], numbers[1], numbers[2], numbers[3], color);\n                    }\n                    break;\n                case 'circle':\n                    if (this.isValidCirc(numbers)) {\n                        this.addCirc(position, numbers[0], new Point(numbers[1], numbers[2]), color);\n                    }\n                    break;\n                case 'polygon':\n                    if (this.isValidPoly(numbers)) {\n                        this.addPoly(position, numbers, color);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n    }\n}\nlet app = new App();\nconst addShapeButton = document.getElementById('add');\nconst shapeList = document.getElementById('shapes');\nconst shapes = ['rectangle', 'circle', 'square', 'point', 'polygon'];\nshapeList.addEventListener('input', (event) => {\n    let target = event.target;\n    if (target.tagName === 'TEXTAREA') {\n        app.updateAll();\n    }\n});\n// add new shapes\naddShapeButton.addEventListener('click', () => {\n    let li = document.createElement('li');\n    let tx = document.createElement('textarea');\n    let se = document.createElement('select');\n    li.append(se);\n    li.append(tx);\n    shapeList.append(li);\n    for (let shape of shapes) {\n        let option = document.createElement('option');\n        option.append(document.createTextNode(shape));\n        se.append(option);\n    }\n});\nwindow.addEventListener('resize', () => {\n    app.resize();\n    app.drawBasis();\n    app.updateAll();\n});\n// vim: set fdm=syntax fdl=0: (fold subsections)\n"]}