{"version":3,"sources":["main.js"],"names":["Point","x","y","hexToRGB","hex","alpha","r","parseInt","slice","g","b","App","colors","lastMousePos","mouseIsDown","canvas","document","getElementById","ctx","getContext","origin","addMouseListeners","stepSize","stepRange","resize","drawBasis","addEventListener","event","undefined","mDx","mDy","shiftOrigin","updateAll","w","window","getComputedStyle","getPropertyValue","h","setAttribute","console","log","width","height","lineCap","lineJoin","clearRect","deltaX","deltaY","position","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","pos","drawXGuideline","drawYGuideline","fillStyle","arc","Math","PI","fill","point","points","color","length","pt","canvLocate","section_id","left","right","top","bottom","push","gridPoly","radius","center","pts","coordStyle","i","half","floor","arr","Number","isNaN","isValid","clearGrid","childNodes","forEach","value","shapeType","getElementsByTagName","numbers","trim","split","map","isValidRect","addRect","isValidCirc","addCirc","isValidPoly","addPoly","app","addShapeButton","shapeList","shapes","target","tagName","li","createElement","di","tx","append","style","classList","add","se","shape","option","createTextNode"],"mappings":"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","file":"main.ad77636d.js","sourceRoot":"../src","sourcesContent":["class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\nfunction hexToRGB(hex, alpha) {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    if (alpha) {\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    else {\n        return `rgba(${r}, ${g}, ${b})`;\n    }\n}\nclass App {\n    constructor() {\n        this.colors = ['#9c7979', '#9c9279', '#799c7d', '#799c97', '#798c9c', '#798c9c', '#93799c', '#9c798f'];\n        this.lastMousePos = { x: 0, y: 0 };\n        this.mouseIsDown = false;\n        let canvas = document.getElementById('canv');\n        let ctx = canvas.getContext('2d');\n        this.origin = new Point(0, 0);\n        this.ctx = ctx;\n        this.canvas = canvas;\n        this.addMouseListeners();\n        this.stepSize = 50;\n        this.stepRange = 1;\n        this.resize();\n        this.drawBasis();\n    }\n    addMouseListeners() {\n        this.canvas.addEventListener('mousedown', (event) => {\n            this.mouseIsDown = true;\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n        this.canvas.addEventListener('mouseup', () => {\n            this.mouseIsDown = false;\n        });\n        this.canvas.addEventListener('mousemove', (event) => {\n            if (!this.mouseIsDown)\n                return;\n            if (this.lastMousePos.x !== undefined && this.lastMousePos.y !== undefined) {\n                let mDx = event.x - this.lastMousePos.x;\n                let mDy = event.y - this.lastMousePos.y;\n                this.shiftOrigin(mDx, mDy);\n                this.drawBasis();\n                this.updateAll();\n            }\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n    }\n    resize() {\n        let w = window.getComputedStyle(this.canvas, null).getPropertyValue(\"width\");\n        let h = window.getComputedStyle(this.canvas, null).getPropertyValue(\"height\");\n        // add 8 pixels to height, for some reason\n        this.canvas.setAttribute('width', w);\n        this.canvas.setAttribute('height', h);\n        console.log(w, h);\n        this.origin = new Point(this.canvas.width / 2, this.canvas.height / 2);\n        // for some reason, these values are reset inside this function, so set them back\n        this.ctx.lineCap = 'round';\n        this.ctx.lineJoin = 'round';\n    }\n    clearGrid() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    shiftOrigin(deltaX, deltaY) {\n        this.origin.x += deltaX;\n        this.origin.y += deltaY;\n    }\n    drawXGuideline(position) {\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#eeeeee';\n        this.ctx.beginPath();\n        this.ctx.moveTo(position, 0);\n        this.ctx.lineTo(position, this.canvas.height);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    drawYGuideline(position) {\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#eeeeee';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, position);\n        this.ctx.lineTo(this.canvas.width, position);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    drawBasis() {\n        // tick marks\n        for (let pos = this.origin.x + this.stepSize; pos < this.canvas.width; pos += this.stepSize) {\n            this.drawXGuideline(pos);\n        }\n        for (let pos = this.origin.x - this.stepSize; pos > 0; pos -= this.stepSize) {\n            this.drawXGuideline(pos);\n        }\n        for (let pos = this.origin.y + this.stepSize; pos < this.canvas.height; pos += this.stepSize) {\n            this.drawYGuideline(pos);\n        }\n        for (let pos = this.origin.y - this.stepSize; pos > 0; pos -= this.stepSize) {\n            this.drawYGuideline(pos);\n        }\n        this.ctx.lineWidth = 2;\n        this.ctx.fillStyle = '#c9c9c9';\n        this.ctx.strokeStyle = '#c9c9c9';\n        // the origin\n        this.ctx.beginPath();\n        this.ctx.arc(this.origin.x, this.origin.y, 5, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n        // y axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.origin.x, 0);\n        this.ctx.lineTo(this.origin.x, this.canvas.height);\n        this.ctx.stroke();\n        this.ctx.closePath();\n        // x axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, this.origin.y);\n        this.ctx.lineTo(this.canvas.width, this.origin.y);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * locate the actual coordinates of a point on the canvas, given a grid point\n     **/\n    canvLocate(point) {\n        return new Point(this.origin.x + (this.stepSize * point.x) / this.stepRange, this.origin.y - (this.stepSize * point.y) / this.stepRange);\n    }\n    gridPoly(points, color) {\n        if (points.length === 0)\n            return;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 5;\n        this.ctx.moveTo(points[0].x, points[0].y);\n        this.ctx.beginPath();\n        for (let point of points) {\n            let pt = this.canvLocate(point);\n            this.ctx.lineTo(pt.x, pt.y);\n        }\n        this.ctx.closePath();\n        this.ctx.stroke();\n        this.ctx.fill();\n    }\n    addRect(section_id, left, right, top, bottom, color) {\n        let points = [];\n        points.push(new Point(left, top));\n        points.push(new Point(left, bottom));\n        points.push(new Point(right, bottom));\n        points.push(new Point(right, top));\n        this.gridPoly(points, color);\n    }\n    addCirc(section_id, radius, center, color) {\n        /* console.log('in here'); */\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.lineWidth = 5;\n        this.ctx.beginPath();\n        let pt = this.canvLocate(center);\n        this.ctx.arc(pt.x, pt.y, radius * this.stepSize, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    addPoly(section_id, pts, color, coordStyle) {\n        let points = [];\n        switch (coordStyle) {\n            case \"xyxy\":\n                for (let i = 0; i < pts.length; i += 2) {\n                    points.push(new Point(pts[i], pts[i + 1]));\n                }\n                ;\n                break;\n            case \"xxyy\":\n                let half = Math.floor(pts.length / 2);\n                for (let i = 0; i < half; i++) {\n                    points.push(new Point(pts[i], pts[i + half]));\n                }\n                break;\n            default:\n                break;\n        }\n        ;\n        this.gridPoly(points, color);\n    }\n    isValid(arr) {\n        // check for NaN\n        for (let x of arr)\n            if (Number.isNaN(x))\n                return false;\n        return true;\n    }\n    isValidRect(arr) {\n        return this.isValid(arr) && (arr.length === 4);\n    }\n    isValidCirc(arr) {\n        return this.isValid(arr) && arr.length === 3;\n    }\n    isValidPoly(arr) {\n        return this.isValid(arr) && arr.length % 2 === 0;\n    }\n    updateAll() {\n        this.clearGrid();\n        this.drawBasis();\n        const shapeList = document.getElementById('shapes');\n        shapeList.childNodes.forEach((value, position) => {\n            let shapeType = value.getElementsByTagName('select')[0].value;\n            let numbers = value.getElementsByTagName('textarea')[0].value.trim().split(/[\\n ]+/).map(x => +x);\n            let color = this.colors[position % this.colors.length];\n            switch (shapeType) {\n                case 'rectangle':\n                    if (this.isValidRect(numbers)) {\n                        this.addRect(position, numbers[0], numbers[1], numbers[2], numbers[3], color);\n                    }\n                    break;\n                case 'circle':\n                    if (this.isValidCirc(numbers)) {\n                        this.addCirc(position, numbers[0], new Point(numbers[1], numbers[2]), color);\n                    }\n                    break;\n                case 'polygon xyxy':\n                    if (this.isValidPoly(numbers)) {\n                        this.addPoly(position, numbers, color, 'xyxy');\n                    }\n                    break;\n                case 'polygon xxyy':\n                    if (this.isValidPoly(numbers)) {\n                        this.addPoly(position, numbers, color, 'xxyy');\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n    }\n}\nlet app = new App();\nconst addShapeButton = document.getElementById('add');\nconst shapeList = document.getElementById('shapes');\nconst shapes = ['rectangle', 'circle', 'polygon xyxy', 'polygon xxyy'];\nshapeList.addEventListener('input', (event) => {\n    let target = event.target;\n    if (target.tagName === 'TEXTAREA') {\n        app.updateAll();\n    }\n});\nshapeList.addEventListener('change', (event) => {\n    let target = event.target;\n    if (target.tagName === 'SELECT') {\n        app.updateAll();\n    }\n});\n// add new shapes\naddShapeButton.addEventListener('click', () => {\n    let li = document.createElement('li');\n    let di = document.createElement('div');\n    let tx = document.createElement('textarea');\n    di.append(tx);\n    di.style.width = '100%';\n    di.classList.add('w-wrap');\n    let se = document.createElement('select');\n    li.append(se);\n    li.append(di);\n    shapeList.append(li);\n    for (let shape of shapes) {\n        let option = document.createElement('option');\n        option.append(document.createTextNode(shape));\n        se.append(option);\n    }\n});\nwindow.addEventListener('resize', () => {\n    app.resize();\n    app.drawBasis();\n    app.updateAll();\n});\n// vim: set fdm=syntax fdl=10: (fold subsections)\n"]}