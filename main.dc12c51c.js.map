{"version":3,"sources":["main.js"],"names":["Point","x","y","hexToRGB","hex","alpha","r","parseInt","slice","g","b","App","colors","lastMousePos","mouseIsDown","canvas","document","getElementById","ctx","getContext","origin","addMouseListeners","stepSize","stepRange","resize","drawBasis","addEventListener","event","undefined","mDx","mDy","shiftOrigin","updateAll","newSize","newRange","resetOrigin","w","window","getComputedStyle","getPropertyValue","h","setAttribute","width","height","lineCap","lineJoin","clearRect","deltaX","deltaY","position","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","closePath","pos","drawXGuideline","drawYGuideline","fillStyle","arc","Math","PI","fill","point","points","color","length","pt","canvLocate","left","right","top","bottom","push","gridPoly","radius","center","pts","coordStyle","thickness","i","half","floor","arr","Number","isNaN","isValid","clearGrid","childNodes","forEach","value","options","getElementsByTagName","shapeType","isMultiLine","input","trim","shapes","split","map","line","numbers","isValidRect","addRect","isValidCirc","addCirc","isValidPoly","addPoly","isValidPoint","app","addShapeButton","shapeList","keyIsDown","Map","target","tagName","triggerKeyEffects","key","addNewShape","lastElementChild","focus","ignore","includes","blur","li","createElement","di","tx","append","style","classList","add","se","sm","shape","option","createTextNode","t","sizeInput","changeStepSize","p","rangeInput","changeStepRange"],"mappings":";AAmcA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,UAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,OAAA,aAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAlcMA,IAAAA,EACF,SAAYC,EAAAA,EAAGC,GAAG,EAAA,KAAA,GACTD,KAAAA,EAAIA,EACJC,KAAAA,EAAIA,GAObC,EAAW,SAACC,EAAKC,GACXC,IAAAA,EAAIC,SAASH,EAAII,MAAM,EAAG,GAAI,IAC9BC,EAAIF,SAASH,EAAII,MAAM,EAAG,GAAI,IAC9BE,EAAIH,SAASH,EAAII,MAAM,EAAG,GAAI,IAChCH,OAAAA,EACeC,QAAAA,OAAAA,EAAMG,MAAAA,OAAAA,EAAMC,MAAAA,OAAAA,EAAML,MAAAA,OAAAA,EAAjC,KAGeC,QAAAA,OAAAA,EAAMG,MAAAA,OAAAA,EAAMC,MAAAA,OAAAA,EAA3B,MAGFC,EAAAA,WACY,SAAA,IAAA,EAAA,KAAA,GAELC,KAAAA,OAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAE5EC,KAAAA,aAAe,CAAEZ,EAAG,EAAGC,EAAG,GAE1BY,KAAAA,aAAc,EAEdC,KAAAA,OAASC,SAASC,eAAe,QACjCC,KAAAA,IAAM,KAAKH,OAAOI,WAAW,MAC7BC,KAAAA,OAAS,IAAIpB,EAAM,EAAG,GAEtBqB,KAAAA,oBAEAC,KAAAA,SAAW,GACXC,KAAAA,UAAY,EAEZC,KAAAA,SACAC,KAAAA,YA0Zb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,oBArZwB,MAAA,WAAA,IAAA,EAAA,KAEXV,KAAAA,OAAOW,iBAAiB,YAAa,SAACC,GACvC,EAAKb,aAAc,EACnB,EAAKD,aAAaZ,EAAI0B,EAAM1B,EAC5B,EAAKY,aAAaX,EAAIyB,EAAMzB,IAG3Ba,KAAAA,OAAOW,iBAAiB,UAAW,WACpC,EAAKZ,aAAc,IAIlBC,KAAAA,OAAOW,iBAAiB,YAAa,SAACC,GACnC,GAAC,EAAKb,YAAN,CAEA,QAAwBc,IAAxB,EAAKf,aAAaZ,QAA2C2B,IAAxB,EAAKf,aAAaX,EAAiB,CACpE2B,IAAAA,EAAMF,EAAM1B,EAAI,EAAKY,aAAaZ,EAClC6B,EAAMH,EAAMzB,EAAI,EAAKW,aAAaX,EACtC,EAAK6B,YAAYF,EAAKC,GACtB,EAAKL,YACL,EAAKO,YAGT,EAAKnB,aAAaZ,EAAI0B,EAAM1B,EAC5B,EAAKY,aAAaX,EAAIyB,EAAMzB,OA4XxC,CAAA,IAAA,iBAtXmB+B,MAAAA,SAAAA,GACNX,KAAAA,SAAWW,EACXR,KAAAA,YACAO,KAAAA,cAmXb,CAAA,IAAA,kBA9WoBE,MAAAA,SAAAA,GACPX,KAAAA,UAAYW,EACZT,KAAAA,YACAO,KAAAA,cA2Wb,CAAA,IAAA,SArW+B,MAAA,WAApBG,IAAAA,IAAc,UAAA,OAAA,QAAA,IAAA,UAAA,KAAA,UAAA,GACbC,EAAIC,OAAOC,iBAAiB,KAAKvB,OAAQ,MAAMwB,iBAAiB,SAChEC,EAAIH,OAAOC,iBAAiB,KAAKvB,OAAQ,MAAMwB,iBAAiB,UAG/DxB,KAAAA,OAAO0B,aAAa,QAASL,GAC7BrB,KAAAA,OAAO0B,aAAa,SAAUD,GAC/BL,IACA,KAAKf,OAAS,IAAIpB,EAAM,KAAKe,OAAO2B,MAAQ,EAAG,KAAK3B,OAAO4B,OAAS,IAEnEzB,KAAAA,IAAI0B,QAAU,QACd1B,KAAAA,IAAI2B,SAAW,UA0V5B,CAAA,IAAA,YArVgB,MAAA,WACH3B,KAAAA,IAAI4B,UAAU,EAAG,EAAG,KAAK/B,OAAO2B,MAAO,KAAK3B,OAAO4B,UAoVhE,CAAA,IAAA,cA7UgBI,MAAAA,SAAAA,EAAQC,GACX5B,KAAAA,OAAOnB,GAAK8C,EACZ3B,KAAAA,OAAOlB,GAAK8C,IA2UzB,CAAA,IAAA,iBAtUmBC,MAAAA,SAAAA,GACN/B,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAIiC,YAAc,UAClBjC,KAAAA,IAAIkC,YACJlC,KAAAA,IAAImC,OAAOJ,EAAU,GACrB/B,KAAAA,IAAIoC,OAAOL,EAAU,KAAKlC,OAAO4B,QACjCzB,KAAAA,IAAIqC,SACJrC,KAAAA,IAAIsC,cA+TjB,CAAA,IAAA,iBA1TmBP,MAAAA,SAAAA,GACN/B,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAIiC,YAAc,UAClBjC,KAAAA,IAAIkC,YACJlC,KAAAA,IAAImC,OAAO,EAAGJ,GACd/B,KAAAA,IAAIoC,OAAO,KAAKvC,OAAO2B,MAAOO,GAC9B/B,KAAAA,IAAIqC,SACJrC,KAAAA,IAAIsC,cAmTjB,CAAA,IAAA,YA9SgB,MAAA,WAEH,IAAA,IAAIC,EAAM,KAAKrC,OAAOnB,EAAI,KAAKqB,SAAUmC,EAAM,KAAK1C,OAAO2B,MAAOe,GAAO,KAAKnC,SAC1EoC,KAAAA,eAAeD,GAEnB,IAAA,IAAIA,EAAM,KAAKrC,OAAOnB,EAAI,KAAKqB,SAAUmC,EAAM,EAAGA,GAAO,KAAKnC,SAC1DoC,KAAAA,eAAeD,GAEnB,IAAA,IAAIA,EAAM,KAAKrC,OAAOlB,EAAI,KAAKoB,SAAUmC,EAAM,KAAK1C,OAAO4B,OAAQc,GAAO,KAAKnC,SAC3EqC,KAAAA,eAAeF,GAEnB,IAAA,IAAIA,EAAM,KAAKrC,OAAOlB,EAAI,KAAKoB,SAAUmC,EAAM,EAAGA,GAAO,KAAKnC,SAC1DqC,KAAAA,eAAeF,GAEnBvC,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAI0C,UAAY,UAChB1C,KAAAA,IAAIiC,YAAc,UAElBjC,KAAAA,IAAIkC,YACJlC,KAAAA,IAAI2C,IAAI,KAAKzC,OAAOnB,EAAG,KAAKmB,OAAOlB,EAAG,EAAG,EAAa,EAAV4D,KAAKC,IACjD7C,KAAAA,IAAI8C,OACJ9C,KAAAA,IAAIsC,YAEJtC,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAIiC,YAAc,UAClBjC,KAAAA,IAAIkC,YACJlC,KAAAA,IAAImC,OAAO,KAAKjC,OAAOnB,EAAG,GAC1BiB,KAAAA,IAAIoC,OAAO,KAAKlC,OAAOnB,EAAG,KAAKc,OAAO4B,QACtCzB,KAAAA,IAAIqC,SACJrC,KAAAA,IAAIsC,YAEJtC,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAIiC,YAAc,UAClBjC,KAAAA,IAAIkC,YACJlC,KAAAA,IAAImC,OAAO,EAAG,KAAKjC,OAAOlB,GAC1BgB,KAAAA,IAAIoC,OAAO,KAAKvC,OAAO2B,MAAO,KAAKtB,OAAOlB,GAC1CgB,KAAAA,IAAIqC,SACJrC,KAAAA,IAAIsC,cAyQjB,CAAA,IAAA,aApQeS,MAAAA,SAAAA,GACA,OAAA,IAAIjE,EAAM,KAAKoB,OAAOnB,EAAK,KAAKqB,SAAW2C,EAAMhE,EAAK,KAAKsB,UAAW,KAAKH,OAAOlB,EAAK,KAAKoB,SAAW2C,EAAM/D,EAAK,KAAKqB,aAmQtI,CAAA,IAAA,WA9Pa2C,MAAAA,SAAAA,EAAQC,GAAOjB,IAAAA,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAC5BgB,GAAkB,IAAlBA,EAAOE,OAAPF,CAEChD,KAAAA,IAAI0C,UAAYzD,EAASgE,EAAO,OAChCjD,KAAAA,IAAIiC,YAAcgB,EAClBjD,KAAAA,IAAIgC,UAAYA,EAChBhC,KAAAA,IAAImC,OAAOa,EAAO,GAAGjE,EAAGiE,EAAO,GAAGhE,GAClCgB,KAAAA,IAAIkC,YACSc,IARiB,EAQjBA,EAAAA,EAAAA,GARiB,IAQT,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBD,IAAAA,EAAiB,EAAA,MAClBI,EAAK,KAAKC,WAAWL,GACpB/C,KAAAA,IAAIoC,OAAOe,EAAGpE,EAAGoE,EAAGnE,IAVM,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAY9BgB,KAAAA,IAAIsC,YACJtC,KAAAA,IAAIqC,SACJrC,KAAAA,IAAI8C,UAgPjB,CAAA,IAAA,UAvOYO,MAAAA,SAAAA,EAAMC,EAAOC,EAAKC,EAAQP,GAC1BD,IAAAA,EAAS,GACbA,EAAOS,KAAK,IAAI3E,EAAMuE,EAAME,IAC5BP,EAAOS,KAAK,IAAI3E,EAAMuE,EAAMG,IAC5BR,EAAOS,KAAK,IAAI3E,EAAMwE,EAAOE,IAC7BR,EAAOS,KAAK,IAAI3E,EAAMwE,EAAOC,IACxBG,KAAAA,SAASV,EAAQC,KAiO9B,CAAA,IAAA,UA5NYU,MAAAA,SAAAA,EAAQC,EAAQX,GACfjD,KAAAA,IAAIiC,YAAcgB,EAClBjD,KAAAA,IAAI0C,UAAYzD,EAASgE,EAAO,OAChCjD,KAAAA,IAAIgC,UAAY,EAChBhC,KAAAA,IAAIkC,YACLiB,IAAAA,EAAK,KAAKC,WAAWQ,GACpB5D,KAAAA,IAAI2C,IAAIQ,EAAGpE,EAAGoE,EAAGnE,EAAG2E,EAAS,KAAKvD,SAAU,EAAa,EAAVwC,KAAKC,IACpD7C,KAAAA,IAAI8C,OACJ9C,KAAAA,IAAIqC,SACJrC,KAAAA,IAAIsC,cAmNjB,CAAA,IAAA,UA7MYuB,MAAAA,SAAAA,EAAKZ,EAAOa,GAAYC,IAAAA,EAAY,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACpCf,EAAS,GACLc,OAAAA,GACC,IAAA,OACI,IAAA,IAAIE,EAAI,EAAGA,EAAIH,EAAIX,OAAQc,GAAK,EACjChB,EAAOS,KAAK,IAAI3E,EAAM+E,EAAIG,GAAIH,EAAIG,EAAI,KAG1C,MACC,IAAA,OAEI,IADDC,IAAAA,EAAOrB,KAAKsB,MAAML,EAAIX,OAAS,GAC1Bc,EAAI,EAAGA,EAAIC,EAAMD,IACtBhB,EAAOS,KAAK,IAAI3E,EAAM+E,EAAIG,GAAIH,EAAIG,EAAIC,KAO7CP,KAAAA,SAASV,EAAQC,EAAOc,KA0LrC,CAAA,IAAA,UArLYI,MAAAA,SAAAA,GAEUA,IAFL,EAEKA,EAAAA,EAAAA,GAFL,IAET,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAASpF,IAAAA,EAAT,EAAA,MACQqF,GAAAA,OAAOC,MAAMtF,GACb,OAAO,GAJN,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAKF,OAAA,IAgLf,CAAA,IAAA,cA9KgBoF,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,IAAwB,IAAfA,EAAIjB,SA6KzC,CAAA,IAAA,cA3KgBiB,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,IAAuB,IAAfA,EAAIjB,SA0KxC,CAAA,IAAA,cAxKgBiB,MAAAA,SAAAA,GACD,OAAA,KAAKG,QAAQH,IAAQA,EAAIjB,OAAS,GAAM,IAuKvD,CAAA,IAAA,eArKiBiB,MAAAA,SAAAA,GACF,OAAA,KAAKG,QAAQH,IAAsB,GAAdA,EAAIjB,SAoKxC,CAAA,IAAA,YA7JgB,MAAA,WAAA,IAAA,EAAA,KACHqB,KAAAA,YACAhE,KAAAA,YACaT,SAASC,eAAe,UAChCyE,WAAWC,QAAQ,SAACC,EAAO3C,GAC7B4C,IAAAA,EAAUD,EAAME,qBAAqB,UACrCC,EAAYF,EAAQ,GAAGD,MACvBI,EAAmC,MAArBH,EAAQ,GAAGD,MACzBK,EAAQL,EAAME,qBAAqB,YAAY,GAAGF,MAAMM,OACxDC,EAAS,GACTH,EAEAG,EAAS,CADKF,EAAMG,MAAM,UAAUC,IAAI,SAAApG,GAAK,OAACA,KAI9CkG,EAASF,EAAMG,MAAM,OAAOC,IAAI,SAAAC,GAAQA,OAAAA,EAAKF,MAAM,MAAMC,IAAI,SAAApG,GAAK,OAACA,MAEnEkE,IAb0C,EAa1CA,EAAQ,EAAKvD,OAAOqC,EAAW,EAAKrC,OAAOwD,QAC3B+B,EAAAA,EAAAA,GAd0B,IAclB,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAnBI,IAAAA,EAAmB,EAAA,MAChBR,OAAAA,GACC,IAAA,YACG,EAAKS,YAAYD,IACjB,EAAKE,QAAQF,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,GAAIpC,GAEjE,MACC,IAAA,SACG,EAAKuC,YAAYH,IACjB,EAAKI,QAAQJ,EAAQ,GAAI,IAAIvG,EAAMuG,EAAQ,GAAIA,EAAQ,IAAKpC,GAEhE,MACC,IAAA,YACG,EAAKyC,YAAYL,IACjB,EAAKM,QAAQN,EAASpC,EAAO,QAEjC,MACC,IAAA,YACG,EAAKyC,YAAYL,IACjB,EAAKM,QAAQN,EAASpC,EAAO,QAEjC,MACC,IAAA,QACG,EAAK2C,aAAaP,IAClB,EAAKM,QAAQN,EAASpC,EAAO,OAAQ,MAtCP,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,WAyJ1D,EA7aMxD,GAoUFoG,EAAM,IAAIpG,EACRqG,EAAiBhG,SAASC,eAAe,OACzCgG,EAAYjG,SAASC,eAAe,UACpCkF,EAAS,CAAC,YAAa,SAAU,YAAa,YAAa,SAC3De,EAAY,IAAIC,IACtBF,EAAUvF,iBAAiB,QAAS,SAACC,GAEV,aADVA,EAAMyF,OACRC,SACPN,EAAI/E,cAGZiF,EAAUvF,iBAAiB,SAAU,SAACC,GAEX,WADVA,EAAMyF,OACRC,SACPN,EAAI/E,cAGZ,IAAIsF,EAAoB,SAACC,GACbA,OAAAA,GACC,IAAA,IACDC,IACAP,EAAUQ,iBAAiB3B,qBAAqB,YAAY,GAAG4B,UAO3ErF,OAAOX,iBAAiB,UAAW,SAACC,GAC5BgG,IACAP,EAASzF,EAAMyF,OAED,WAAdzF,EAAM4F,IAHG,CAAC,SAAU,YAOZK,SAASR,EAAOC,WACxBH,EAAUvF,EAAM4F,MAAO,GAJvBH,EAAOS,SAOfxF,OAAOX,iBAAiB,QAAS,SAACC,GAC1B4F,IAAAA,EAAM5F,EAAM4F,IACZL,EAAUK,IACVD,EAAkBC,GACtBL,EAAUK,IAAO,IAErB,IAAIC,EAAc,WAEVM,IAAAA,EAAK9G,SAAS+G,cAAc,MAE5BC,EAAKhH,SAAS+G,cAAc,OAC5BE,EAAKjH,SAAS+G,cAAc,YAChCC,EAAGE,OAAOD,GACVD,EAAGG,MAAMzF,MAAQ,OACjBsF,EAAGI,UAAUC,IAAI,UAEbC,IAAAA,EAAKtH,SAAS+G,cAAc,UAE5BQ,EAAKvH,SAAS+G,cAAc,UAChCD,EAAGI,OAAOI,GACVR,EAAGI,OAAOK,GACVT,EAAGI,OAAOF,GACVf,EAAUiB,OAAOJ,GACC3B,IAjBE,EAiBFA,EAAAA,EAAAA,GAjBE,IAiBM,IAAA,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAAjBqC,IAAAA,EAAiB,EAAA,MAClBC,EAASzH,SAAS+G,cAAc,UACpCU,EAAOP,OAAOlH,SAAS0H,eAAeF,IACtCF,EAAGJ,OAAOO,IApBM,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IAsBN,IAAA,IAAA,EAAA,EAAA,EAAA,CAAC,IAAK,KAAM,EAAA,EAAA,OAAA,IAAA,CAAjBE,IAAAA,EAAJ,EAAA,GACGF,EAASzH,SAAS+G,cAAc,UACpCU,EAAOP,OAAOlH,SAAS0H,eAAeC,IACtCJ,EAAGL,OAAOO,KAIlBzB,EAAetF,iBAAiB,QAAS,WACrC8F,MAEJnF,OAAOX,iBAAiB,SAAU,WAC9BqF,EAAIvF,SACJuF,EAAItF,YACJsF,EAAI/E,cAER,IAAM4G,EAAY5H,SAASC,eAAe,QAC1C2H,EAAUlH,iBAAiB,QAAS,WACR,KAApBkH,EAAUhD,OACVmB,EAAI8B,eAAe,IAEnBC,IAAAA,GAAKF,EAAUhD,MACdN,OAAOC,MAAMuD,IACVA,EAAI,IACJ/B,EAAI8B,eAAeC,KAG/B,IAAMC,EAAa/H,SAASC,eAAe,SAC3C8H,EAAWrH,iBAAiB,QAAS,WACR,KAArBqH,EAAWnD,OACXmB,EAAIiC,gBAAgB,GAEpBF,IAAAA,GAAKC,EAAWnD,MACfN,OAAOC,MAAMuD,IACVA,EAAI,GACJ/B,EAAIiC,gBAAgBF","file":"main.dc12c51c.js","sourceRoot":"../src","sourcesContent":["/* import {hexToRGB} from 'util' */\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n/**\n * Add an alpha value to any hex code.\n * @returns an rgba string\n */\nlet hexToRGB = (hex, alpha) => {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    if (alpha) {\n        return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n    }\n    else {\n        return `rgba(${r}, ${g}, ${b})`;\n    }\n};\nclass App {\n    constructor() {\n        /** list of colors to use */\n        this.colors = ['#9c7979', '#9c9279', '#799c7d', '#799c97', '#798c9c', '#93799c', '#9c798f'];\n        /** data used to detect when the grid is dragged */\n        this.lastMousePos = { x: 0, y: 0 };\n        /** is the mouse down on the grid */\n        this.mouseIsDown = false;\n        // initialize canvas\n        this.canvas = document.getElementById('canv');\n        this.ctx = this.canvas.getContext('2d');\n        this.origin = new Point(0, 0);\n        // add mouse listeners to detect drag\n        this.addMouseListeners();\n        // set default step size\n        this.stepSize = 50;\n        this.stepRange = 1;\n        // initialize width/height and draw the grid basis\n        this.resize();\n        this.drawBasis();\n    }\n    /**\n     * add mouselisteners to detect when the mouse is pressed down on the grid\n     */\n    addMouseListeners() {\n        // check when mouse is pressed down, and locate position\n        this.canvas.addEventListener('mousedown', (event) => {\n            this.mouseIsDown = true;\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n        // detect mouseup\n        this.canvas.addEventListener('mouseup', () => {\n            this.mouseIsDown = false;\n        });\n        // when mouse moves, calculate distance between old and new positions,\n        // and use that to shift the grid\n        this.canvas.addEventListener('mousemove', (event) => {\n            if (!this.mouseIsDown)\n                return;\n            if (this.lastMousePos.x !== undefined && this.lastMousePos.y !== undefined) {\n                let mDx = event.x - this.lastMousePos.x;\n                let mDy = event.y - this.lastMousePos.y;\n                this.shiftOrigin(mDx, mDy);\n                this.drawBasis();\n                this.updateAll();\n            }\n            // update mouse position\n            this.lastMousePos.x = event.x;\n            this.lastMousePos.y = event.y;\n        });\n    }\n    /**\n     * Change step size and redraw the grid basis and shapes\n     */\n    changeStepSize(newSize) {\n        this.stepSize = newSize;\n        this.drawBasis();\n        this.updateAll();\n    }\n    /**\n     * Change step range and redraw the grid basis and shapes\n     */\n    changeStepRange(newRange) {\n        this.stepRange = newRange;\n        this.drawBasis();\n        this.updateAll();\n    }\n    /**\n     * Update the canvas visible width and height\n     * @param resetOrigin - re-center the origin.\n     */\n    resize(resetOrigin = true) {\n        let w = window.getComputedStyle(this.canvas, null).getPropertyValue(\"width\");\n        let h = window.getComputedStyle(this.canvas, null).getPropertyValue(\"height\");\n        // may need add 8 pixels to height, for some reason. however am using\n        // overflow-y: hidden, which disables scroll and excess\n        this.canvas.setAttribute('width', w);\n        this.canvas.setAttribute('height', h);\n        if (resetOrigin)\n            this.origin = new Point(this.canvas.width / 2, this.canvas.height / 2);\n        // for some reason, these values are reset inside this function, so set them back\n        this.ctx.lineCap = 'round';\n        this.ctx.lineJoin = 'round';\n    }\n    /**\n     * Clears grid\n     */\n    clearGrid() {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n    /**\n     * Move the origin\n     * @remarks\n     * this method does NOT redraw basis, nor change height.\n     */\n    shiftOrigin(deltaX, deltaY) {\n        this.origin.x += deltaX;\n        this.origin.y += deltaY;\n    }\n    /**\n     * Draw an x guideline given an x-coordinate\n     */\n    drawXGuideline(position) {\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#eeeeee';\n        this.ctx.beginPath();\n        this.ctx.moveTo(position, 0);\n        this.ctx.lineTo(position, this.canvas.height);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw an y guideline given an y-coordinate\n     */\n    drawYGuideline(position) {\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#eeeeee';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, position);\n        this.ctx.lineTo(this.canvas.width, position);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Draw all tick marks, origin, and main axes\n     */\n    drawBasis() {\n        // tick marks\n        for (let pos = this.origin.x + this.stepSize; pos < this.canvas.width; pos += this.stepSize) {\n            this.drawXGuideline(pos);\n        }\n        for (let pos = this.origin.x - this.stepSize; pos > 0; pos -= this.stepSize) {\n            this.drawXGuideline(pos);\n        }\n        for (let pos = this.origin.y + this.stepSize; pos < this.canvas.height; pos += this.stepSize) {\n            this.drawYGuideline(pos);\n        }\n        for (let pos = this.origin.y - this.stepSize; pos > 0; pos -= this.stepSize) {\n            this.drawYGuideline(pos);\n        }\n        this.ctx.lineWidth = 2;\n        this.ctx.fillStyle = '#c9c9c9';\n        this.ctx.strokeStyle = '#c9c9c9';\n        // the origin\n        this.ctx.beginPath();\n        this.ctx.arc(this.origin.x, this.origin.y, 5, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.closePath();\n        // y axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.origin.x, 0);\n        this.ctx.lineTo(this.origin.x, this.canvas.height);\n        this.ctx.stroke();\n        this.ctx.closePath();\n        // x axis\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeStyle = '#c9c9c9';\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, this.origin.y);\n        this.ctx.lineTo(this.canvas.width, this.origin.y);\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Locate the actual coordinates of a point on the canvas, given a grid point\n     **/\n    canvLocate(point) {\n        return new Point(this.origin.x + (this.stepSize * point.x) / this.stepRange, this.origin.y - (this.stepSize * point.y) / this.stepRange);\n    }\n    /**\n     * Fill in a polygon onto the grid given an array of vertices\n     */\n    gridPoly(points, color, lineWidth = 5) {\n        if (points.length === 0)\n            return;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth;\n        this.ctx.moveTo(points[0].x, points[0].y);\n        this.ctx.beginPath();\n        for (let point of points) {\n            let pt = this.canvLocate(point);\n            this.ctx.lineTo(pt.x, pt.y);\n        }\n        this.ctx.closePath();\n        this.ctx.stroke();\n        this.ctx.fill();\n    }\n    /**\n     * Add a rectangle\n     * @param left - the left x coordinate\n     * @param right - the right x coordinate\n     * @param top - the top y coordinate\n     * @param bottom - the bottom y coordinate\n     */\n    addRect(left, right, top, bottom, color) {\n        let points = [];\n        points.push(new Point(left, top));\n        points.push(new Point(left, bottom));\n        points.push(new Point(right, bottom));\n        points.push(new Point(right, top));\n        this.gridPoly(points, color);\n    }\n    /**\n     * Add a circle\n     */\n    addCirc(radius, center, color) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = hexToRGB(color, '0.5');\n        this.ctx.lineWidth = 5;\n        this.ctx.beginPath();\n        let pt = this.canvLocate(center);\n        this.ctx.arc(pt.x, pt.y, radius * this.stepSize, 0, Math.PI * 2);\n        this.ctx.fill();\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    /**\n     * Add a polygon\n     * @param coordStyle - either xyxy (coordinates grouped) or xxyy (split)\n     */\n    addPoly(pts, color, coordStyle, thickness = 5) {\n        let points = [];\n        switch (coordStyle) {\n            case \"xyxy\":\n                for (let i = 0; i < pts.length; i += 2) {\n                    points.push(new Point(pts[i], pts[i + 1]));\n                }\n                ;\n                break;\n            case \"xxyy\":\n                let half = Math.floor(pts.length / 2);\n                for (let i = 0; i < half; i++) {\n                    points.push(new Point(pts[i], pts[i + half]));\n                }\n                break;\n            default:\n                break;\n        }\n        ;\n        this.gridPoly(points, color, thickness);\n    }\n    /**\n     * Check array for NaNs\n     */\n    isValid(arr) {\n        // check for NaN\n        for (let x of arr)\n            if (Number.isNaN(x))\n                return false;\n        return true;\n    }\n    isValidRect(arr) {\n        return this.isValid(arr) && (arr.length === 4);\n    }\n    isValidCirc(arr) {\n        return this.isValid(arr) && arr.length === 3;\n    }\n    isValidPoly(arr) {\n        return this.isValid(arr) && arr.length % 2 === 0;\n    }\n    isValidPoint(arr) {\n        return this.isValid(arr) && arr.length == 2;\n    }\n    // TODO: split function into one separate one (not in class) that\n    // takes in the shapes, and another one within the class that processes\n    /**\n     * Update all the shapes, read them from the HTML list\n     */\n    updateAll() {\n        this.clearGrid();\n        this.drawBasis();\n        const shapeList = document.getElementById('shapes');\n        shapeList.childNodes.forEach((value, position) => {\n            let options = value.getElementsByTagName('select');\n            let shapeType = options[0].value;\n            let isMultiLine = options[1].value === 'm';\n            let input = value.getElementsByTagName('textarea')[0].value.trim();\n            let shapes = [];\n            if (isMultiLine) {\n                let numbers = input.split(/[\\n ]+/).map(x => +x);\n                shapes = [numbers];\n            }\n            else {\n                shapes = input.split(/\\n+/).map(line => line.split(/ +/).map(x => +x));\n            }\n            let color = this.colors[position % this.colors.length];\n            for (let numbers of shapes) {\n                switch (shapeType) {\n                    case 'rectangle':\n                        if (this.isValidRect(numbers)) {\n                            this.addRect(numbers[0], numbers[1], numbers[2], numbers[3], color);\n                        }\n                        break;\n                    case 'circle':\n                        if (this.isValidCirc(numbers)) {\n                            this.addCirc(numbers[0], new Point(numbers[1], numbers[2]), color);\n                        }\n                        break;\n                    case 'poly xyxy':\n                        if (this.isValidPoly(numbers)) {\n                            this.addPoly(numbers, color, 'xyxy');\n                        }\n                        break;\n                    case 'poly xxyy':\n                        if (this.isValidPoly(numbers)) {\n                            this.addPoly(numbers, color, 'xxyy');\n                        }\n                        break;\n                    case 'point':\n                        if (this.isValidPoint(numbers)) {\n                            this.addPoly(numbers, color, 'xxyy', 20);\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            }\n        });\n    }\n}\nlet app = new App();\nconst addShapeButton = document.getElementById('add');\nconst shapeList = document.getElementById('shapes');\nconst shapes = ['rectangle', 'circle', 'poly xyxy', 'poly xxyy', 'point'];\nconst keyIsDown = new Map();\nshapeList.addEventListener('input', (event) => {\n    let target = event.target;\n    if (target.tagName === 'TEXTAREA') {\n        app.updateAll();\n    }\n});\nshapeList.addEventListener('change', (event) => {\n    let target = event.target;\n    if (target.tagName === 'SELECT') {\n        app.updateAll();\n    }\n});\nlet triggerKeyEffects = (key) => {\n    switch (key) {\n        case 'a':\n            addNewShape();\n            shapeList.lastElementChild.getElementsByTagName('textarea')[0].focus();\n            break;\n        default:\n            break;\n    }\n    ;\n};\nwindow.addEventListener('keydown', (event) => {\n    let ignore = ['SELECT', 'TEXTAREA'];\n    let target = event.target;\n    // use escape to blur\n    if (event.key === 'Escape') {\n        target.blur();\n        return;\n    }\n    if (!ignore.includes(target.tagName)) {\n        keyIsDown[event.key] = true;\n    }\n});\nwindow.addEventListener('keyup', (event) => {\n    let key = event.key;\n    if (keyIsDown[key])\n        triggerKeyEffects(key);\n    keyIsDown[key] = false;\n});\nlet addNewShape = () => {\n    // add new list element\n    let li = document.createElement('li');\n    // add area for text\n    let di = document.createElement('div');\n    let tx = document.createElement('textarea');\n    di.append(tx);\n    di.style.width = '100%';\n    di.classList.add('w-wrap');\n    // add selection for shape type\n    let se = document.createElement('select');\n    // add selection for single or multi\n    let sm = document.createElement('select');\n    li.append(se);\n    li.append(sm);\n    li.append(di);\n    shapeList.append(li);\n    for (let shape of shapes) {\n        let option = document.createElement('option');\n        option.append(document.createTextNode(shape));\n        se.append(option);\n    }\n    for (let t of ['s', 'm']) {\n        let option = document.createElement('option');\n        option.append(document.createTextNode(t));\n        sm.append(option);\n    }\n};\n// add new shapes\naddShapeButton.addEventListener('click', () => {\n    addNewShape();\n});\nwindow.addEventListener('resize', () => {\n    app.resize();\n    app.drawBasis();\n    app.updateAll();\n});\nconst sizeInput = document.getElementById('size');\nsizeInput.addEventListener('input', () => {\n    if (sizeInput.value === '') {\n        app.changeStepSize(50);\n    }\n    let p = +sizeInput.value;\n    if (!Number.isNaN(p)) {\n        if (p > 20)\n            app.changeStepSize(p);\n    }\n});\nconst rangeInput = document.getElementById('range');\nrangeInput.addEventListener('input', () => {\n    if (rangeInput.value === '') {\n        app.changeStepRange(1);\n    }\n    let p = +rangeInput.value;\n    if (!Number.isNaN(p)) {\n        if (p > 0)\n            app.changeStepRange(p);\n    }\n});\n// vim: set fdm=syntax fdl=10: (fold subsections)\n"]}