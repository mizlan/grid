{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.0b3838c4.js","sourceRoot":"../src","sourcesContent":["class Point {\n\tconstructor(public x: number, public y: number) {}\n}\n\n/**\n * Add an alpha value to any hex code.\n * @returns an rgba string\n */\nlet hexToRGB = (hex: string, alpha: string): string => {\n\tconst r = parseInt(hex.slice(1, 3), 16);\n\tconst g = parseInt(hex.slice(3, 5), 16);\n\tconst b = parseInt(hex.slice(5, 7), 16);\n\n\tif (alpha) {\n\t\treturn `rgba(${r}, ${g}, ${b}, ${alpha})`;\n\t} else {\n\t\treturn `rgba(${r}, ${g}, ${b})`;\n\t}\n}\n\nclass App {\n\t/** canvas DOM object */\n\tprivate canvas: HTMLCanvasElement;\n\t/** canvas 2d context */\n\tprivate ctx: CanvasRenderingContext2D;\n\n\t/** the origin of the grid */\n\tprivate origin: Point;\n\t/** the number of pixels per one step */\n\tprivate stepSize: number;\n\t/** distance one step corresponds with */\n\tprivate stepRange: number;\n\t/** list of colors to use */\n\tprivate colors = ['#9c7979', '#9c9279', '#799c7d', '#799c97', '#798c9c', '#93799c', '#9c798f']\n\t/** data used to detect when the grid is dragged */\n\tprivate lastMousePos = {x: 0, y: 0};\n\t/** is the mouse down on the grid */\n\tprivate mouseIsDown = false;\n\n\tconstructor() {\n\t\t// initialize canvas\n\t\tthis.canvas = document.getElementById('canv') as HTMLCanvasElement;\n\t\tthis.ctx = this.canvas.getContext('2d');\n\t\tthis.origin = new Point(0, 0);\n\n\t\t// add mouse listeners to detect drag\n\t\tthis.addMouseListeners();\n\n\t\t// set default step size\n\t\tthis.stepSize = 50;\n\t\tthis.stepRange = 1;\n\n\t\t// initialize width/height and draw the grid basis\n\t\tthis.resize();\n\t\tthis.drawBasis();\n\t}\n\n\t/**\n\t * add mouselisteners to detect when the mouse is pressed down on the grid\n\t */\n\taddMouseListeners() {\n\t\t// check when mouse is pressed down, and locate position\n\t\tthis.canvas.addEventListener('mousedown', (event) => {\n\t\t\tthis.mouseIsDown = true;\n\t\t\tthis.lastMousePos.x = event.x;\n\t\t\tthis.lastMousePos.y = event.y;\n\t\t});\n\t\t// detect mouseup\n\t\tthis.canvas.addEventListener('mouseup', () => {\n\t\t\tthis.mouseIsDown = false;\n\t\t});\n\t\t// when mouse moves, calculate distance between old and new positions,\n\t\t// and use that to shift the grid\n\t\tthis.canvas.addEventListener('mousemove', (event) => {\n\t\t\tif (!this.mouseIsDown) return;\n\t\t\tif (this.lastMousePos.x !== undefined && this.lastMousePos.y !== undefined) {\n\t\t\t\tlet mDx = event.x - this.lastMousePos.x;\n\t\t\t\tlet mDy = event.y - this.lastMousePos.y;\n\t\t\t\tthis.shiftOrigin(mDx, mDy);\n\t\t\t\tthis.drawBasis();\n\t\t\t\tthis.updateAll();\n\t\t\t}\n\t\t\t// update mouse position\n\t\t\tthis.lastMousePos.x = event.x;\n\t\t\tthis.lastMousePos.y = event.y;\n\t\t});\n\t}\n\n\t/**\n\t * Change step size and redraw the grid basis and shapes\n\t */\n\tchangeStepSize(newSize: number) {\n\t\tthis.stepSize = newSize;\n\t\tthis.drawBasis();\n\t\tthis.updateAll();\n\t}\n\n\t/**\n\t * Change step range and redraw the grid basis and shapes\n\t */\n\tchangeStepRange(newRange: number) {\n\t\tthis.stepRange = newRange;\n\t\tthis.drawBasis();\n\t\tthis.updateAll();\n\t}\n\n\t/**\n\t * Update the canvas visible width and height\n\t * @param resetOrigin - re-center the origin.\n\t */\n\tresize(resetOrigin = true): void {\n\t\tlet w = window.getComputedStyle(this.canvas, null).getPropertyValue(\"width\");\n\t\tlet h = window.getComputedStyle(this.canvas, null).getPropertyValue(\"height\")\n\t\t// may need add 8 pixels to height, for some reason. however am using\n\t\t// overflow-y: hidden, which disables scroll and excess\n\t\tthis.canvas.setAttribute('width', w);\n\t\tthis.canvas.setAttribute('height', h);\n\n\t\tif (resetOrigin)\n\t\t\tthis.origin = new Point(this.canvas.width/2, this.canvas.height/2);\n\n\t\t// for some reason, these values are reset inside this function, so set them back\n\t\tthis.ctx.lineCap = 'round';\n\t\tthis.ctx.lineJoin = 'round';\n\t}\n\n\t/**\n\t * Clears grid\n\t */\n\tclearGrid() {\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\t}\n\n\t/**\n\t * Move the origin\n\t * @remarks\n\t * this method does NOT redraw basis, nor change height.\n\t */\n\tshiftOrigin(deltaX: number, deltaY: number) {\n\t\tthis.origin.x += deltaX;\n\t\tthis.origin.y += deltaY;\n\t}\n\n\t/**\n\t * Draw an x guideline given an x-coordinate\n\t */\n\tdrawXGuideline(position: number) {\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.strokeStyle = '#eeeeee';\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.moveTo(position, 0);\n\t\tthis.ctx.lineTo(position, this.canvas.height);\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\t}\n\n\t/**\n\t * Draw an y guideline given an y-coordinate\n\t */\n\tdrawYGuideline(position: number) {\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.strokeStyle = '#eeeeee';\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.moveTo(0, position);\n\t\tthis.ctx.lineTo(this.canvas.width, position);\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\t}\n\n\t/**\n\t * Draw all tick marks, origin, and main axes\n\t */\n\tdrawBasis(): void {\n\t\t// tick marks\n\t\tfor (let pos = this.origin.x + this.stepSize; pos < this.canvas.width; pos += this.stepSize) {\n\t\t\tthis.drawXGuideline(pos);\n\t\t}\n\t\tfor (let pos = this.origin.x - this.stepSize; pos > 0; pos -= this.stepSize) {\n\t\t\tthis.drawXGuideline(pos);\n\t\t}\n\t\tfor (let pos = this.origin.y + this.stepSize; pos < this.canvas.height; pos += this.stepSize) {\n\t\t\tthis.drawYGuideline(pos);\n\t\t}\n\t\tfor (let pos = this.origin.y - this.stepSize; pos > 0; pos -= this.stepSize) {\n\t\t\tthis.drawYGuideline(pos);\n\t\t}\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.fillStyle = '#c9c9c9';\n\t\tthis.ctx.strokeStyle = '#c9c9c9';\n\t\t// the origin\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.arc(this.origin.x, this.origin.y, 5, 0, Math.PI * 2);\n\t\tthis.ctx.fill();\n\t\tthis.ctx.closePath();\n\t\t// y axis\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.strokeStyle = '#c9c9c9';\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.moveTo(this.origin.x, 0);\n\t\tthis.ctx.lineTo(this.origin.x, this.canvas.height);\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\t\t// x axis\n\t\tthis.ctx.lineWidth = 2;\n\t\tthis.ctx.strokeStyle = '#c9c9c9';\n\t\tthis.ctx.beginPath();\n\t\tthis.ctx.moveTo(0, this.origin.y);\n\t\tthis.ctx.lineTo(this.canvas.width, this.origin.y);\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\t}\n\n\t/**\n\t * Locate the actual coordinates of a point on the canvas, given a grid point\n\t **/\n\tcanvLocate(point: Point): Point {\n\t\treturn new Point(\n\t\t\tthis.origin.x + (this.stepSize * point.x) / this.stepRange,\n\t\t\tthis.origin.y - (this.stepSize * point.y) / this.stepRange\n\t\t);\n\t}\n\n\t/**\n\t * Fill in a polygon onto the grid given an array of vertices\n\t */\n\tgridPoly(points: Point[], color: string, lineWidth: number = 5): void {\n\t\tif (points.length === 0)\n\t\t\treturn;\n\t\tthis.ctx.fillStyle = hexToRGB(color, '0.5');\n\t\tthis.ctx.strokeStyle = color;\n\t\tthis.ctx.lineWidth = lineWidth;\n\t\tthis.ctx.moveTo(points[0].x, points[0].y);\n\t\tthis.ctx.beginPath();\n\t\tfor (let point of points) {\n\t\t\tlet pt = this.canvLocate(point);\n\t\t\tthis.ctx.lineTo(pt.x, pt.y);\n\t\t}\n\t\tthis.ctx.closePath();\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.fill();\n\t}\n\n\t/**\n\t * Add a rectangle\n\t * @param left - the left x coordinate\n\t * @param right - the right x coordinate\n\t * @param top - the top y coordinate\n\t * @param bottom - the bottom y coordinate\n\t */\n\taddRect(left: number, right: number, top: number, bottom: number, color: string): void {\n\t\tlet points: Point[] = [];\n\t\tpoints.push(new Point(left, top));\n\t\tpoints.push(new Point(left, bottom));\n\t\tpoints.push(new Point(right, bottom));\n\t\tpoints.push(new Point(right, top));\n\t\tthis.gridPoly(points, color);\n\t}\n\n\t/**\n\t * Add a circle\n\t */\n\taddCirc(radius: number, center: Point, color: string) {\n\t\tthis.ctx.strokeStyle = color;\n\t\tthis.ctx.fillStyle = hexToRGB(color, '0.5');\n\t\tthis.ctx.lineWidth = 5;\n\t\tthis.ctx.beginPath();\n\t\tlet pt = this.canvLocate(center);\n\t\tthis.ctx.arc(pt.x, pt.y, radius * this.stepSize, 0, Math.PI * 2);\n\t\tthis.ctx.fill();\n\t\tthis.ctx.stroke();\n\t\tthis.ctx.closePath();\n\t}\n\n\t/**\n\t * Add a polygon\n\t * @param coordStyle - either xyxy (coordinates grouped) or xxyy (split)\n\t */\n\taddPoly(pts: number[], color: string, coordStyle: \"xyxy\" | \"xxyy\", thickness: number = 5) {\n\t\tlet points: Point[] = [];\n\t\tswitch (coordStyle) {\n\t\t\tcase \"xyxy\":\n\t\t\t\tfor (let i = 0; i < pts.length; i+= 2) {\n\t\t\t\t\tpoints.push(new Point(pts[i], pts[i+1]));\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase \"xxyy\":\n\t\t\t\tlet half = Math.floor(pts.length / 2);\n\t\t\t\tfor (let i = 0; i < half; i++) {\n\t\t\t\t\tpoints.push(new Point(pts[i], pts[i + half]));\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t};\n\t\tthis.gridPoly(points, color, thickness);\n\t}\n\n\t/**\n\t * Check array for NaNs\n\t */\n\tisValid(arr: number[]): boolean {\n\t\t// check for NaN\n\t\tfor (let x of arr)\n\t\t\tif (Number.isNaN(x))\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tisValidRect(arr: number[]): boolean {\n\t\treturn this.isValid(arr) && (arr.length === 4);\n\t}\n\n\tisValidCirc(arr: number[]): boolean {\n\t\treturn this.isValid(arr) && arr.length === 3;\n\t}\n\n\tisValidPoly(arr: number[]): boolean {\n\t\treturn this.isValid(arr) && arr.length % 2 === 0;\n\t}\n\n\tisValidPoint(arr: number[]): boolean {\n\t\treturn this.isValid(arr) && arr.length == 2;\n\t}\n\n\t// TODO: split function into one separate one (not in class) that\n\t// takes in the shapes, and another one within the class that processes\n\n\t/**\n\t * Update all the shapes, read them from the HTML list\n\t */\n\tupdateAll(): void {\n\t\tthis.clearGrid();\n\t\tthis.drawBasis();\n\t\tconst shapeList = document.getElementById('shapes') as HTMLUListElement;\n\t\tshapeList.childNodes.forEach((value, position) => {\n\t\t\tlet options = (value as HTMLElement).getElementsByTagName('select');\n\t\t\tlet shapeType = options[0].value;\n\t\t\tlet isMultiLine = options[1].value === 'm';\n\t\t\tlet input = (value as HTMLElement).getElementsByTagName('textarea')[0].value.trim();\n\t\t\tlet shapes: number[][] = [];\n\t\t\tif (isMultiLine) {\n\t\t\t\tlet numbers = input.split(/[\\n ]+/).map(x => +x);\n\t\t\t\tshapes = [numbers];\n\t\t\t} else {\n\t\t\t\tshapes = input.split(/\\n+/).map(line => line.split(/ +/).map(x => +x));\n\t\t\t}\n\t\t\tlet color = this.colors[position % this.colors.length];\n\t\t\tfor (let numbers of shapes) {\n\t\t\t\tswitch (shapeType) {\n\t\t\t\t\tcase 'rectangle':\n\t\t\t\t\t\tif (this.isValidRect(numbers)) {\n\t\t\t\t\t\t\tthis.addRect(numbers[0], numbers[1], numbers[2], numbers[3], color);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'circle':\n\t\t\t\t\t\tif (this.isValidCirc(numbers)) {\n\t\t\t\t\t\t\tthis.addCirc(numbers[0], new Point(numbers[1], numbers[2]), color);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'poly xyxy':\n\t\t\t\t\t\tif (this.isValidPoly(numbers)) {\n\t\t\t\t\t\t\tthis.addPoly(numbers, color, 'xyxy');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'poly xxyy':\n\t\t\t\t\t\tif (this.isValidPoly(numbers)) {\n\t\t\t\t\t\t\tthis.addPoly(numbers, color, 'xxyy');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'point':\n\t\t\t\t\t\tif (this.isValidPoint(numbers)) {\n\t\t\t\t\t\t\tthis.addPoly(numbers, color, 'xxyy', 20);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nlet app = new App();\n\nconst addShapeButton = document.getElementById('add');\nconst shapeList = document.getElementById('shapes') as HTMLUListElement;\nconst shapes = ['rectangle', 'circle', 'poly xyxy', 'poly xxyy', 'point'];\nconst keyIsDown = new Map<string, boolean>();\n\nshapeList.addEventListener('input', (event) => {\n\tlet target = (event.target as HTMLElement);\n\tif (target.tagName === 'TEXTAREA') {\n\t\tapp.updateAll();\n\t}\n});\n\nshapeList.addEventListener('change', (event) => {\n\tlet target = (event.target as HTMLElement);\n\tif (target.tagName === 'SELECT') {\n\t\tapp.updateAll();\n\t}\n});\n\nlet triggerKeyEffects = (key: string) => {\n\tswitch (key) {\n\t\tcase 'a':\n\t\t\taddNewShape();\n\t\t\tshapeList.lastElementChild.getElementsByTagName('textarea')[0].focus();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t};\n}\n\nwindow.addEventListener('keydown', (event) => {\n\tlet ignore = ['SELECT', 'TEXTAREA'];\n\tlet target = (event.target as HTMLElement);\n\t// use escape to blur\n\tif (event.key === 'Escape') {\n\t\ttarget.blur();\n\t\treturn;\n\t}\n\tif (!ignore.includes(target.tagName)) {\n\t\tkeyIsDown[event.key] = true;\n\t}\n});\n\nwindow.addEventListener('keyup', (event) => {\n\tlet key = event.key;\n\tif (keyIsDown[key])\n\t\ttriggerKeyEffects(key);\n\tkeyIsDown[key] = false;\n});\n\nlet addNewShape = () => {\n\t// add new list element\n\tlet li = document.createElement('li');\n\t// add area for text\n\tlet di = document.createElement('div');\n\tlet tx = document.createElement('textarea');\n\tdi.append(tx);\n\tdi.style.width = '100%';\n\tdi.classList.add('w-wrap');\n\t// add selection for shape type\n\tlet se = document.createElement('select');\n\t// add selection for single or multi\n\tlet sm = document.createElement('select');\n\tli.append(se);\n\tli.append(sm);\n\tli.append(di);\n\tshapeList.append(li);\n\tfor (let shape of shapes) {\n\t\tlet option = document.createElement('option');\n\t\toption.append(document.createTextNode(shape));\n\t\tse.append(option);\n\t}\n\tfor (let t of ['s', 'm']) {\n\t\tlet option = document.createElement('option');\n\t\toption.append(document.createTextNode(t));\n\t\tsm.append(option);\n\t}\n}\n\n// add new shapes\naddShapeButton.addEventListener('click', () => {\n\taddNewShape();\n});\n\nwindow.addEventListener('resize', () => {\n\tapp.resize();\n\tapp.drawBasis();\n\tapp.updateAll();\n});\n\nconst sizeInput = document.getElementById('size') as HTMLInputElement;\nsizeInput.addEventListener('input', () => {\n\tif (sizeInput.value === '') {\n\t\tapp.changeStepSize(50);\n\t}\n\tlet p = +sizeInput.value;\n\tif (!Number.isNaN(p)) {\n\t\tif (p > 20)\n\t\t\tapp.changeStepSize(p);\n\t}\n});\nconst rangeInput = document.getElementById('range') as HTMLInputElement;\nrangeInput.addEventListener('input', () => {\n\tif (rangeInput.value === '') {\n\t\tapp.changeStepRange(1);\n\t}\n\tlet p = +rangeInput.value;\n\tif (!Number.isNaN(p)) {\n\t\tif (p > 0)\n\t\t\tapp.changeStepRange(p);\n\t}\n});\n"]}